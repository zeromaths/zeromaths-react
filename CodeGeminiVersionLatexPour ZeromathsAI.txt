<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zeromaths.fr - Explorateur de Concepts avec IA et MathJax</title>
    <script>
        MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']], // Délimiteurs pour les maths en ligne
                displayMath: [['$$', '$$'], ['\\[', '\\]']] // Délimiteurs pour les maths en mode display
            },
            svg: {
                fontCache: 'global' // Optimisation pour le rendu SVG
            },
            options: {
                skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'], // Ignorer ces balises
                ignoreHtmlClass: 'tex2jax_ignore', // Ignorer les éléments avec cette classe
                processHtmlClass: 'tex2jax_process' // Traiter les éléments avec cette classe
            }
        };
    </script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

    <style>
        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #000000;
            /* Fond noir */
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #ffffff;
            padding: 20px;
            box-sizing: border-box;
        }

        .gradient-text {
            font-size: 3.5rem;
            font-weight: bold;
            background: linear-gradient(to right, #0000CD, #00008B, #4B0082, #8A2BE2);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.2),
                1px 1px 3px rgba(0, 0, 0, 0.5);
            text-align: center;
            margin-bottom: 30px;
        }

        .feature-section {
            background-color: rgba(255, 255, 255, 0.03);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 20px;
            width: 100%;
            max-width: 600px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .feature-title {
            font-size: 1.5rem;
            color: #8A2BE2;
            margin-bottom: 15px;
            text-align: center;
        }

        .display-area {
            margin-top: 15px;
            font-size: 1.1rem;
            /* La taille de police de base pour le texte */
            color: #e0e0e0;
            min-height: 40px;
            text-align: left;
            padding: 12px;
            border-radius: 8px;
            background-color: rgba(0, 0, 0, 0.2);
            white-space: pre-wrap;
            overflow-wrap: break-word;
            line-height: 1.6;
            /* Améliorer la lisibilité du texte et des formules */
        }

        /* MathJax ajuste généralement bien sa propre taille, mais on peut ajouter des styles si besoin */
        .display-area mjx-container { /* Sélecteur pour les conteneurs MathJax */
            margin: 0.5em 0 !important; /* Assurer un espacement vertical pour les équations display */
        }


        .styled-button {
            display: block;
            margin: 20px auto 0 auto;
            padding: 12px 25px;
            font-size: 1rem;
            color: #ffffff;
            background-color: #8A2BE2;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s ease;
            box-shadow: 0 4px 15px rgba(138, 43, 226, 0.4);
        }

        .styled-button:hover {
            background-color: #9932CC;
        }

        .styled-button:active {
            transform: scale(0.98);
        }

        .styled-button:disabled {
            background-color: #555;
            cursor: not-allowed;
        }

        .input-field {
            width: calc(100% - 24px);
            padding: 12px;
            margin-top: 10px;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            background-color: rgba(0, 0, 0, 0.1);
            color: #ffffff;
            font-size: 1rem;
        }

        .loading-indicator {
            margin-top: 15px;
            font-size: 1rem;
            color: #cccccc;
            text-align: center;
        }

        @media (max-width: 700px) {
            .gradient-text {
                font-size: 2.8rem;
            }

            .feature-section {
                padding: 15px;
            }

            .feature-title {
                font-size: 1.3rem;
            }

            .display-area {
                font-size: 1rem;
            }

            .styled-button {
                font-size: 0.9rem;
                padding: 10px 20px;
            }

            .input-field {
                font-size: 0.9rem;
            }
        }
    </style>
</head>

<body>

    <h1 class="gradient-text">Zeromaths.fr</h1>

    <div class="feature-section">
        <h2 class="feature-title">Explorateur de Concepts Mathématiques</h2>
        <input type="text" id="mathConceptInput" class="input-field" placeholder="Entrez un concept mathématique (ex: fraction)">
        <div id="conceptExplanationDisplay" class="display-area">L'explication du concept apparaîtra ici...</div>
        <div id="conceptLoadingIndicator" class="loading-indicator" style="display: none;">Recherche de l'explication...
            ✨</div>
        <button id="explainConceptBtn" class="styled-button">✨ Expliquer ce Concept</button>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // --- Logique pour l'Explication de Concepts Mathématiques ---
            const explainConceptBtn = document.getElementById('explainConceptBtn');
            const mathConceptInput = document.getElementById('mathConceptInput');
            const conceptExplanationDisplay = document.getElementById('conceptExplanationDisplay');
            const conceptLoadingIndicator = document.getElementById('conceptLoadingIndicator');

            explainConceptBtn.addEventListener('click', async () => {
                const concept = mathConceptInput.value.trim();
                if (!concept) {
                    conceptExplanationDisplay.textContent = "Veuillez entrer un concept mathématique.";
                    return;
                }

                conceptExplanationDisplay.innerHTML = ''; // Nettoyer la zone d'affichage
                conceptLoadingIndicator.style.display = 'block';
                explainConceptBtn.disabled = true;
                mathConceptInput.disabled = true;

                // Prompt clarifié pour Gemini concernant la syntaxe LaTeX
                const promptConcept = `Explique le concept mathématique suivant de manière simple, concise et facile à comprendre pour quelqu'un qui débute ou a des difficultés avec les maths : "${concept}". La réponse doit être en français. Pour toutes les expressions mathématiques, utilise IMPÉRATIVEMENT la syntaxe LaTeX standard : encadre les maths en ligne avec un seul dollar de chaque côté (par exemple: $x^2 + y^2 = z^2$) et les maths en mode display (équations sur leur propre ligne, centrées) avec deux dollars de chaque côté (par exemple: $$\\sum_{i=1}^{n} i = \\frac{n(n+1)}{2}$$). N'utilise PAS de backticks (\`) ou d'autres caractères superflus autour des expressions LaTeX elles-mêmes. Par exemple, écris '$E=mc^2$' et NON PAS '\`$E=mc^2$\`'. Évite le jargon complexe autant que faire se peut, ou explique-le clairement.`;

                try {
                    const generatedText = await callGeminiAPI(promptConcept);
                    console.log("Texte brut reçu de Gemini:", generatedText); // Log pour diagnostic
                    conceptExplanationDisplay.textContent = generatedText; // Insérer le texte brut

                    if (typeof MathJax !== "undefined" && MathJax.startup) {
                        MathJax.startup.promise.then(() => {
                            console.log("MathJax est prêt (via startup.promise).");
                            console.log("Contenu de la div AVANT typesetPromise:", conceptExplanationDisplay.innerHTML);

                            setTimeout(() => { // Ajout d'un léger délai
                                console.log("Appel de MathJax.typesetPromise...");
                                MathJax.typesetPromise([conceptExplanationDisplay])
                                    .then(() => {
                                        console.log("MathJax.typesetPromise terminé.");
                                        console.log("Contenu de la div APRÈS typesetPromise:", conceptExplanationDisplay.innerHTML);
                                    })
                                    .catch((err) => {
                                        console.error('Erreur DANS MathJax.typesetPromise:', err);
                                    });
                            }, 0); // Délai de 0ms pour permettre au DOM de se mettre à jour
                        }).catch((err) => {
                            console.error("Erreur lors de l'attente de MathJax.startup.promise:", err);
                        });
                    } else {
                        console.warn("MathJax, MathJax.startup ou MathJax.startup.promise n'est pas défini. Le rendu LaTeX pourrait échouer.");
                        if (typeof MathJax !== "undefined" && typeof MathJax.typeset === "function") {
                           console.log("Tentative de MathJax.typeset() comme fallback.");
                           try {
                                MathJax.typeset([conceptExplanationDisplay]);
                                console.log("MathJax.typeset() (fallback) terminé.");
                           } catch (e) {
                                console.error("Erreur lors du fallback MathJax.typeset():", e);
                           }
                        }
                    }

                } catch (error) {
                    console.error('Erreur lors de l\'explication du concept:', error);
                    conceptExplanationDisplay.textContent = `Erreur : ${error.message}. Veuillez réessayer.`;
                } finally {
                    conceptLoadingIndicator.style.display = 'none';
                    explainConceptBtn.disabled = false;
                    mathConceptInput.disabled = false;
                }
            });

            // --- Fonction générique pour appeler l'API Gemini ---
            async function callGeminiAPI(promptText) {
                let chatHistory = [{ role: "user", parts: [{ text: promptText }] }];
                const payload = { contents: chatHistory };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                let resultJson; 

                if (!response.ok) {
                    let errorDetails = "Erreur HTTP: " + response.status;
                    try {
                        resultJson = await response.json(); 
                        if (resultJson && resultJson.error && resultJson.error.message) {
                            errorDetails += " - " + resultJson.error.message;
                        }
                    } catch (e) {
                        errorDetails += " (impossible de lire les détails de l'erreur)";
                    }
                    throw new Error(errorDetails);
                }

                resultJson = await response.json();

                if (resultJson.candidates && resultJson.candidates.length > 0 &&
                    resultJson.candidates[0].content && resultJson.candidates[0].content.parts &&
                    resultJson.candidates[0].content.parts.length > 0) {
                    return resultJson.candidates[0].content.parts[0].text.trim();
                } else {
                    if (resultJson.promptFeedback && resultJson.promptFeedback.blockReason) {
                        console.error("Contenu bloqué par l'API:", resultJson.promptFeedback.blockReason);
                        let userMessage = "L'explication n'a pas pu être générée car la demande a été bloquée.";
                        if (resultJson.promptFeedback.blockReason.reason) {
                             userMessage += ` Raison: ${resultJson.promptFeedback.blockReason.reason}`;
                        }
                        throw new Error(userMessage);
                    } else {
                        console.error("Réponse de l'API Gemini inattendue:", resultJson);
                        throw new Error("Structure de réponse inattendue de l'API.");
                    }
                }
            }
        });
    </script>

</body>

</html>
