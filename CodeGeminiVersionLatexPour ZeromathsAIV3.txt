<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zeromaths.fr - Chatbot Mathématiques</title>
    <!-- MathJax pour le rendu des formules LaTeX -->
    <script>
        MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],        // Définition des délimiteurs pour expressions en ligne
                displayMath: [['$$', '$$'], ['\\[', '\\]']]     // Délimiteurs pour expressions affichées (block)
            },
            svg: {
                fontCache: 'global'                                 // Utilisation d’un cache global pour les polices SVG
            },
            options: {
                skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'],
                ignoreHtmlClass: 'tex2jax_ignore',                  // Classes à ignorer pour le traitement
                processHtmlClass: 'tex2jax_process'                 // Classes à traiter
            }
        };
    </script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

    <style>
        /* ===================== Variables globales & Styles de base ===================== */
        :root {
            --primary-color: #8A2BE2;         /* Couleur principale : violet intense */
            --secondary-color: #5cb85c;       /* Couleur secondaire : vert */
            --tertiary-color: #f0ad4e;        /* Couleur tertiaire : orange */
            --background-light: rgba(255, 255, 255, 0.03); /* Fond clair (très transparent) pour cartes */
            --background-dark: #000000;       /* Fond principal sombre */
            --text-color: #ffffff;            /* Couleur de texte : blanc */
            --text-muted: #e0e0e0;            /* Texte secondaire/grisé */
            --border-light: rgba(255, 255, 255, 0.1);     /* Bordures claires */
            --input-bg: rgba(0, 0, 0, 0.1);    /* Fond des champs d’entrée */
            --button-radius: 25px;            /* Rayon de bordure pour boutons */
            --card-radius: 12px;              /* Rayon de bordure pour cartes/messages */
            --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);  /* Ombre portée pour cartes/messages */
            --transition-fast: 0.2s ease;      /* Vitesse de transition rapide */
        }

        * {
            box-sizing: border-box;           /* Inclusion du padding/border dans la largeur/hauteur */
        }

        body {
            display: flex;
            flex-direction: column;           /* Disposition verticale */
            align-items: center;              /* Centrer horizontalement */
            margin: 0;
            padding: 20px;
            min-height: 100vh;                /* Au moins la hauteur de la fenêtre */
            background-color: var(--background-dark); /* Fond sombre */
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* Police moderne */
            color: var(--text-color);         /* Texte blanc */
            line-height: 1.6;
        }

        /* Style pour le titre principal avec un dégradé et découpe de texte */
        h1.gradient-text {
            font-size: 3.5rem;
            font-weight: bold;
            background: linear-gradient(to right, #0000CD, #00008B, #4B0082, #8A2BE2);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.2),
                         1px 1px 3px rgba(0, 0, 0, 0.5);
            text-align: center;
            margin-bottom: 20px;
        }

        /* ===================== Conteneur du chat ===================== */
        .chat-container {
            width: 100%;
            max-width: 700px;                         /* Limite la largeur à 700px */
            background-color: var(--background-light);
            border: 1px solid var(--border-light);
            border-radius: var(--card-radius);
            box-shadow: var(--card-shadow);
            padding: 15px;
            display: flex;
            flex-direction: column;                   /* Messages empilés verticalement */
            max-height: 80vh;                         /* Max hauteur : 80% de la fenêtre */
            overflow-y: auto;                         /* Scroll si overflow vertical */
        }

        /* ===================== Bulles de message ===================== */
        .message {
            max-width: 80%;                            /* Ne pas dépasser 80% de la largeur */
            margin-bottom: 10px;
            padding: 10px 15px;
            border-radius: var(--card-radius);
            position: relative;
            opacity: 0;                                /* Initialement invisible */
            transform: translateY(10px);               /* Légèrement décalé vers le bas */
            transition: opacity 0.3s, transform 0.3s;   /* Transition pour fade-in et slide-up */
        }

        /* Quand la classe "visible" est ajoutée, la bulle apparaît */
        .message.visible {
            opacity: 1;
            transform: translateY(0);
        }

        /* Styles spécifiques pour les bulles du bot */
        .bot {
            align-self: flex-start;                   /* Aligné à gauche */
            background-color: var(--primary-color);
            color: var(--text-color);
            border-top-left-radius: 2px;
            border-bottom-left-radius: var(--card-radius);
        }

        /* Styles pour les bulles de l’utilisateur */
        .user {
            align-self: flex-end;                     /* Aligné à droite */
            background-color: var(--secondary-color);
            color: var(--text-color);
            border-top-right-radius: 2px;
            border-bottom-right-radius: var(--card-radius);
        }

        /* Indicateur de "typing" (bot en train d’écrire) */
        .typing-indicator {
            font-style: italic;
            color: var(--text-muted);
        }

        /* ===================== Quick Replies (boutons d’action rapide) ===================== */
        .quick-replies {
            display: flex;
            flex-wrap: wrap;                            /* Les boutons passent à la ligne si nécessaire */
            gap: 10px;
            margin: 10px 0;
            opacity: 0;                                /* Caché initialement */
            transform: translateY(10px);
            transition: opacity 0.2s, transform 0.2s;    /* Animation d’apparition */
        }

        /* Lorsque visible, afficher les quick replies */
        .quick-replies.visible {
            opacity: 1;
            transform: translateY(0);
        }

        /* Style des boutons quick replies */
        .quick-reply-button {
            background-color: var(--tertiary-color);
            color: var(--text-color);
            border: none;
            border-radius: var(--button-radius);
            padding: 8px 15px;
            cursor: pointer;
            transition: background-color var(--transition-fast), transform 0.1s ease;
        }

        .quick-reply-button:hover {
            opacity: 0.9;                               /* Retour visuel au survol */
        }

        .quick-reply-button:active {
            transform: scale(0.96);                     /* Effet "clic" */
        }

        /* ===================== Section de saisie utilisateur ===================== */
        .input-section {
            width: 100%;
            max-width: 700px;
            display: flex;
            flex-direction: column;
            margin-top: 10px;
        }

        /* Champ de saisie de texte */
        .input-field {
            width: 100%;
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 8px;
            border: 1px solid var(--border-light);
            background-color: var(--input-bg);
            color: var(--text-color);
            font-size: 1rem;
            transition: border-color var(--transition-fast);
        }

        .input-field:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 5px rgba(138, 43, 226, 0.4);
        }

        /* Bouton d’envoi */
        .send-button {
            align-self: flex-end;                       /* Aligné à droite */
            padding: 10px 20px;
            font-size: 1rem;
            color: var(--text-color);
            background-color: var(--primary-color);
            border: none;
            border-radius: var(--button-radius);
            cursor: pointer;
            transition: background-color var(--transition-fast), transform 0.1s ease;
            box-shadow: 0 4px 15px rgba(138, 43, 226, 0.4);
        }

        .send-button:disabled {
            background-color: #555;
            cursor: not-allowed;
            opacity: 0.7;
        }

        .send-button:hover:not(:disabled) {
            opacity: 0.9;
        }

        .send-button:active:not(:disabled) {
            transform: scale(0.96);
        }

        /* ===================== Styles Responsive ===================== */
        @media (max-width: 700px) {
            h1.gradient-text { font-size: 2.8rem; }
            .chat-container { padding: 10px; }
            .message { font-size: 0.9rem; }
            .input-field { font-size: 0.9rem; padding: 10px; }
            .send-button { font-size: 0.9rem; padding: 8px 16px; }
        }
    </style>
</head>

<body>
    <!-- Titre principal avec effet dégradé -->
    <h1 class="gradient-text">Zeromaths.fr Chatbot</h1>

    <!-- Conteneur principal du chat où seront injectés les messages -->
    <div class="chat-container" id="chatContainer">
        <!-- Exemples :
            <div class="message bot">Bienvenue !</div>
            <div class="message user">Bonjour</div>
        -->
    </div>

    <!-- Quick Replies : zone où s’affichent les boutons contextuels -->
    <div class="quick-replies" id="quickReplies" aria-live="polite"></div>

    <!-- Section pour saisir le texte utilisateur -->
    <div class="input-section">
        <!-- Champ de saisie -->
        <input type="text" id="userInput" class="input-field" placeholder="Posez votre question..." aria-label="Entrée utilisateur">
        <!-- Bouton Envoyer (désactivé si aucun texte dans le champ) -->
        <button id="sendBtn" class="send-button" disabled>Envoyer</button>
    </div>

    <!-- ===================== Script JavaScript ===================== -->
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            const chatContainer = document.getElementById('chatContainer');
            const userInput = document.getElementById('userInput');
            const sendBtn = document.getElementById('sendBtn');
            const quickReplies = document.getElementById('quickReplies');

            // Récupère le prénom de l’utilisateur dans le localStorage ou le demande via prompt
            let userFirstName = localStorage.getItem('zeromathsUserFirstName');
            if (!userFirstName) {
                userFirstName = prompt("Quel est votre prénom ?");
                if (!userFirstName) userFirstName = 'Ami(e) de Zeromaths';  // Valeur par défaut si rien n’est saisi
                localStorage.setItem('zeromathsUserFirstName', userFirstName);
            }

            /* ===================== Fonctions utilitaires ===================== */

            // Renvoie "Bonjour", "Bon après-midi" ou "Bonsoir" en fonction de l’heure à Paris
            function getGreeting() {
                const now = new Date().toLocaleString('fr-FR', { timeZone: 'Europe/Paris' });
                const hour = new Date(now).getHours();
                if (hour < 12) return 'Bonjour';
                else if (hour < 18) return 'Bon après-midi';
                else return 'Bonsoir';
            }

            // Tableau de phrases humoristiques pour varier la salutation
            const humorLines = [
                "J'espère que votre café est chaud, on va faire chauffer les neurones !",
                "Les intégrales attendent, mais pas avant vous ! 😄",
                "Vous êtes prêt à dompter la géométrie aujourd'hui ?"
            ];

            // Sélectionne aléatoirement une phrase humoristique (50% de chance d’en avoir une)
            function getRandomHumor() {
                if (Math.random() < 0.5) {
                    return humorLines[Math.floor(Math.random() * humorLines.length)];
                }
                return '';
            }

            // Appelle l’API météo pour Paris et renvoie une phrase contextualisée (optionnel)
            async function fetchWeather() {
                try {
                    const apiKey = 'VOTRE_API_KEY'; // À remplacer par votre clé OpenWeatherMap
                    const response = await fetch(
                        `https://api.openweathermap.org/data/2.5/weather?q=Paris&units=metric&lang=fr&appid=${apiKey}`
                    );
                    if (!response.ok) return '';
                    const data = await response.json();
                    return `Avec ce temps ${data.weather[0].description} à Paris, rien de mieux qu’un défi d’algèbre !`;
                } catch {
                    return '';
                }
            }

            // Crée une bulle de message (bot ou user) et l’ajoute au chat
            function createBubble(text, sender = 'bot') {
                const bubble = document.createElement('div');
                bubble.className = `message ${sender}`;      // Ajoute classe "message" et "bot" ou "user"
                bubble.setAttribute('aria-live', 'polite');  // Pour lecteur d’écran
                bubble.textContent = text;
                chatContainer.appendChild(bubble);
                // Force reflow, puis on ajoute la classe visible pour l’animation
                requestAnimationFrame(() => {
                    bubble.classList.add('visible');
                });
                // Scroll automatique vers le bas
                chatContainer.scrollTop = chatContainer.scrollHeight;
                return bubble;
            }

            // Affiche le texte caractère par caractère (effet "machine à écrire")
            async function typeMessage(element, text) {
                element.textContent = '';
                for (const char of text) {
                    element.textContent += char;
                    await new Promise(r => setTimeout(r, 30));      // Délai de 30ms entre chaque caractère
                }
            }

            /* ===================== Affichage de l’accueil personnalisé ===================== */
            (async () => {
                // Affiche un indicateur de "typing" (trois points)
                const typingBubble = document.createElement('div');
                typingBubble.className = 'message bot typing-indicator';
                typingBubble.textContent = '…';
                chatContainer.appendChild(typingBubble);
                chatContainer.scrollTop = chatContainer.scrollHeight;

                // Prépare le texte de bienvenue
                const greeting = getGreeting();                  // "Bonjour" / "Bon après-midi" / "Bonsoir"
                const humor = getRandomHumor();                  // Phrase humoristique ou chaîne vide
                const weatherPart = await fetchWeather();        // Phrase météo ou chaîne vide
                let welcomeText = `${greeting} ${userFirstName} ! Prêt pour de nouvelles découvertes mathématiques aujourd'hui ?`;
                if (humor) welcomeText += ` ${humor}`;            // Ajoute l’humour si non vide
                if (weatherPart) welcomeText += ` ${weatherPart}`; // Ajoute la météo si non vide

                // Retire l’indicateur de "typing"
                chatContainer.removeChild(typingBubble);

                // Crée la bulle bot vide pour y taper le texte
                const bubble = document.createElement('div');
                bubble.className = 'message bot';
                bubble.setAttribute('aria-live', 'polite');
                chatContainer.appendChild(bubble);
                chatContainer.scrollTop = chatContainer.scrollHeight;
                // Effet "machine à écrire" puis apparition
                await typeMessage(bubble, welcomeText);
                bubble.classList.add('visible');
            })();

            /* ===================== Activation du bouton Envoyer ===================== */
            userInput.addEventListener('input', () => {
                // Active ou désactive le bouton en fonction du contenu du champ
                sendBtn.disabled = userInput.value.trim() === '';
            });

            /* ===================== Gestion du clic sur "Envoyer" ===================== */
            sendBtn.addEventListener('click', async () => {
                const text = userInput.value.trim();
                if (!text) return;

                // Affiche le message de l’utilisateur
                createBubble(text, 'user');
                userInput.value = '';
                sendBtn.disabled = true;

                // Réinitialise les quick replies (si affichées)
                quickReplies.innerHTML = '';
                quickReplies.classList.remove('visible');

                // Affiche indicateur de "typing" pour la réponse du bot
                const typingBubble = document.createElement('div');
                typingBubble.className = 'message bot typing-indicator';
                typingBubble.textContent = '…';
                chatContainer.appendChild(typingBubble);
                chatContainer.scrollTop = chatContainer.scrollHeight;

                // Simule un appel API (1 seconde de latence)
                await new Promise(r => setTimeout(r, 1000));
                const botResponse = `Voici une réponse simulée pour : "${text}"`;

                // Retire l’indicateur et affiche la réponse du bot
                chatContainer.removeChild(typingBubble);
                const responseBubble = createBubble('', 'bot');
                await typeMessage(responseBubble, botResponse);
                responseBubble.classList.add('visible');

                // Affiche les quick replies contextuels
                const replies = [
                    { label: '💡 Voir un exemple', action: 'voir_exemple' },
                    { label: '📝 Générer un problème', action: 'generer_probleme' },
                    { label: '🔙 Revenir en arrière', action: 'revenir_arriere' }
                ];
                replies.forEach(rep => {
                    const btn = document.createElement('button');
                    btn.className = 'quick-reply-button';
                    btn.textContent = rep.label;
                    btn.setAttribute('data-action', rep.action);
                    btn.addEventListener('click', () => handleQuickReply(rep.action));
                    quickReplies.appendChild(btn);
                });
                quickReplies.classList.add('visible');
            });

            /* ===================== Gestion des Quick Replies ===================== */
            async function handleQuickReply(action) {
                // Supprime les quick replies existantes
                quickReplies.innerHTML = '';
                quickReplies.classList.remove('visible');

                let promptText;
                switch (action) {
                    case 'voir_exemple':
                        promptText = 'Donne-moi un exemple concret.';
                        break;
                    case 'generer_probleme':
                        promptText = 'Génère un problème.';
                        break;
                    case 'revenir_arriere':
                        promptText = 'Reviens à la question précédente.';
                        break;
                    default:
                        promptText = '';
                }
                if (!promptText) return;

                // Affiche la requête rapide de l’utilisateur
                createBubble(promptText, 'user');

                // Affiche indicateur de "typing"
                const typingBubble = document.createElement('div');
                typingBubble.className = 'message bot typing-indicator';
                typingBubble.textContent = '…';
                chatContainer.appendChild(typingBubble);
                chatContainer.scrollTop = chatContainer.scrollHeight;

                // Simule un appel API
                await new Promise(r => setTimeout(r, 1000));
                const botResponse = `Réponse à la quick reply: "${promptText}"`;

                // Affiche la réponse
                chatContainer.removeChild(typingBubble);
                const responseBubble = createBubble('', 'bot');
                await typeMessage(responseBubble, botResponse);
                responseBubble.classList.add('visible');
            }
        });
    </script>
</body>

</html>
